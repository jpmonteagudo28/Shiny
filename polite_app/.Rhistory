gc()
datasets::faithful
with(faithful,plot(eruptions, waiting))
title(main="old Faithful Geyser data")
pdf(file = "myplot.pdf") ## Open PDF device; create 'myplot.pdf' in my working directory
## Create plot and send to a file (no plot appears on the screen)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser Data") ## Annotate plot
dev.off()
R.version$version
q()
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
n<-length(need)
if(n>0){
libsmsg<-if(n>2) paste(paste(need[1:(n-1)],collapse=", "),",",sep="") else need[1]
print(libsmsg)
if(n>1){
libsmsg<-paste(libsmsg," and ", need[n],sep="")
}
libsmsg<-paste("The following packages could not be found: ",libsmsg,"\n\r\n\rInstall missing packages?",collapse="")
if(winDialog(type = c("yesno"), libsmsg)=="YES"){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
}
## Retreived from https://stackoverflow.com/users/4125693/matthew
mat <- matrix(1:20,4,5)
tmat <-t(mat)
prodmat <- tmat%*%mat # V matirx
prodaat <- mat %*% tmat # U matrix
idenmat <- mat %*% (iden <- diag(5))
eigens <- (eigen(prodmat)
eigensaat <- (eigen(prodaat))
eigens <- (eigen(prodmat)
eigensaat <- (eigen(prodaat))
eigensaat <- eigen(prodaat)
singval <- round(sqrt(eigens$values),3);singval[is.nan(singval)] <- 0
eigens <- eigen(prodmat)
plot(eigens$values,lty = 1, lwd = 2, pch = 10, col = "orangered", type ="l")
svd(mat)
U <- round(eigensaat$vectors,3)
V <- round(eigens$vectors,3)
U
str(svd)
V
rm(list = ls())
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
n<-length(need)
if(n>0){
libsmsg<-if(n>2) paste(paste(need[1:(n-1)],collapse=", "),",",sep="") else need[1]
print(libsmsg)
if(n>1){
libsmsg<-paste(libsmsg," and ", need[n],sep="")
}
libsmsg<-paste("The following packages could not be found: ",libsmsg,"\n\r\n\rInstall missing packages?",collapse="")
if(winDialog(type = c("yesno"), libsmsg)=="YES"){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
}
## Retreived from https://stackoverflow.com/users/4125693/matthew
install.packages("plotly")
install.packages("caret")
install.packages("parsnip")
install.packages("recipes")
install.packages("rsample")
install.packages("tune")
install.packages("h20")
install.packages("h2o")
z <- seq(-4,4,length = 150)
data.frame(x,f=dnorm(x))
z <- seq(-4,4,length = 150)
data.frame(z,f=dnorm(z))
df<- data.frame(z,f=dnorm(z))
ggplot2::ggplot(df,aes(z,f)) + geom_line()
# Plotting the density curve for the normal distribution
# dnorm(z)is the probability density of a certain z-score, using a range of z-scores
# we can plot the PDF
library(ggplot2)
ggplot(df,aes(z,f)) + geom_line()
sim_heights <- rnorm(n,avg,s)
data(ChickWeight)
ChickWeight$DIet <- as.factor(ChickWeight$Diet)
x <-subset(ChickWeight,Diet == 1); x2 <- x$weight
n <- length(x2)
avg <- mean(x2)
s <- sd(x2)
sim_heights <- rnorm(n,avg,s)
hist(sim_heights,col="royalblue", breaks = seq(min(sim_heights),max(sim_heights),by = 2))
hist(sim_heights,col="royalblue", breaks = seq(min(sim_heights),max(sim_heights),by = 1))
hist(sim_heights,col="royalblue", breaks = seq(floor(min(sim_heights)),ceiling(max(sim_heights)),by = 2))
hist(sim_heights,col="royalblue", breaks = seq(floor(min(sim_heights)),ceiling(max(sim_heights)),by = .5))
hist(sim_heights,col="royalblue", breaks = seq(floor(min(sim_heights)),ceiling(max(sim_heights)),by = 10))
hist(sim_heights,col="royalblue", breaks = seq(floor(min(sim_heights)),ceiling(max(sim_heights)),by = 12))
hist(sim_heights,col="royalblue", breaks = seq(floor(min(sim_heights)),ceiling(max(sim_heights)),by = 15))
B <- 10000
heaviest <- replicate(B,{
sim_chickwgt <- rnorm(800,avg,s)
max(sim_chickwgt)
})
mean(heaviest >= 315)
plot(heaviest, col = "royalblue")
hist(heaviest, col = "royalblue")
min(heaviest)
max(heaviest)
mean(heaviest)
quantile(heaviest,5)
quantile(heaviest,probs = c(.025,.975))
quantile(heaviest,probs = c(.025,.50,.975))
quantile(heaviest,probs = c(.025,.50,.75,.85,.975))
set.seed(16)
act_scores <- rnorm(10000,20.9,5.7)
mean(act_scores)
sd(act_scores)
mean(act_scores(which(act_scores[36])))
mean(act_scores[which(act_scores == 36)])
which(act_scores == 36)
which(act_scores >= 36)
mean(act_scores[which(act_scores >= 36)])
count(act_scores[which(act_scores >= 36)])
length(act_scores[which(act_scores >= 36)])
hi_act <- act_scores[which(act_scores >= 30)]
hi_prob <- length(hi_act)/length(act_scores)
hi_prob
lo_act <- act_scores[which(act_scores <= 10)]
low_prob <- length(lo_act)/length(act_scores)
low_prob
x <- seq(1:36)
f_x <- data.frame(x,f=dnorm(x,20.9,5.7))
ggplot(f_x,aes(x,f)) + geom_line()
# COnverting raw to z-scores
z_scores <-scale(act_scores)
z_scores
length(z_scores[which(z_scores >= 2)])/length(z_scores)
(2*5.7)+20.9
qnorm(act_scores,20.9,5.7)
qnorm(x,20,9,5.7)
quantile(act_scores, probs =.975)
ecdf <- function(a) mean(x2<=a)
seq(1:36)
x2 <- 1:36
ecdf <- function(a) mean(x2<=a)
act_test <-sapply(x2,ecdf)
act_test
plot(x2,act_test, lty = "l",xlab = "Scores", ylab = "Pr(x2 <= a")
plot(x2,act_test, lty = "2",xlab = "Scores", ylab = "Pr(x2 <= a")
plot(x2,act_test, lty = 2,xlab = "Scores", ylab = "Pr(x2 <= a")
ecdf(34)
plot(x2,act_test, lty = 2,xlab = "Scores", ylab = "Pr(x2 <= a)")
# Find the minimum integer score with a CDF of at least 0.95
min_score <- min(x2[act_test >= 0.95])
min_score
cdf <- sapply(1:36, function (x){
mean(act_scores <= x)
})
min(which(cdf >= .95))
ecdf <- function(a) mean(act_scores<=x2)
act_test <-sapply(x2,ecdf)
plot(x2,act_test, lty = 2,xlab = "Scores", ylab = "Pr(x2 <= a)")
ecdf <- function(a) mean(act_scores<=a)
act_test <-sapply(x2,ecdf)
plot(x2,act_test, lty = 2,xlab = "Scores", ylab = "Pr(x2 <= a)")
# Find the minimum integer score with a CDF of at least 0.95
min_score <- min(x2[act_test >= 0.95])
min_score
quantile(act_scores, probs = .95)
qnorm(cdf,20.9,5.7)
quant <-qnorm(cdf,20.9,5.7)
quantiles(quant,probs = .95)
quantile(quant,probs = .95)
ecdf(35)
ecdf(34)
ecdf(31)
ecdf(29)
ecdf(29.81)
ecdf(30)
# Find 95th percentile of ACT scores
exp_95 <-qnorm(.95,20.9,5.7)
exp_95
quantile(act_scores,probs = seq(0.01,.99,.01))
quant_26 <- sample_quantiles[which(sample_quantiles < 27 & sample_quantiles > 25)]
sample_quantiles <- quantile(act_scores,probs = seq(0.01,.99,.01))
quant_26 <- sample_quantiles[which(sample_quantiles < 27 & sample_quantiles > 25)]
quant_26
quant_26 <- sample_quantiles[which(sample_quantiles < 27 & sample_quantiles > 25.99)]
quant_26
quant_26 <- sample_quantiles[which(sample_quantiles == 26)]
quant_26
quant_26 <- sample_quantiles[which(sample_quantiles < 27 & sample_quantiles > 25.99)]
quant_26
names(sample_quantiles[max(which(sample_quantiles < 26))])
p <- seq(.01,.99,.01)
theoretical_quant <- qnorm(p,20.9,5.7)
theoretical_quant
plot(theoretical_quant,sample_quantiles)
plot(theoretical_quant,sample_quantiles, pch =20)
plot(theoretical_quant,sample_quantiles, pch =20, lty =2)
qqnorm(sample_quantiles, theoretical_quant, pch =20)
qqnorm(sample_quantiles, theoretical_quant)
plot(sample_quantiles, theoretical_quant, pch = 20, col="black")
abline(0, 1, col = "red", lty = 2)
plot(theoretical_quant,sample_quantiles, pch = 20, col="black")
abline(0, 1, col = "red", lty = 2)
n <- 350
avg <- 64
s <- 3
fem_height <- rnorm(n,avg,s)
fem_height <- pnorm(5,avg,s)
fem_height
ecdf <- function(a) mean(fem_height<=a)
ecdf(5)
fem_height <- rnorm(n,avg,s)
ecdf <- function(a) mean(fem_height<=a)
ecdf(5)
emp_fheight <- rnorm(n,avg,s)
ecdf <- function(a) mean(emp_fheight<=a)
ecdf(5)
ecdf(60)
fem_height <- pnorm(60,avg,s)
fem_height
# Finding female shorter than 5 ft (60 in)
ecdf(72)
# Finding female shorter than 5 ft (60 in)
1 - ecdf(72)
# 0.002857143
1 - pnorm(72,avg,s)
# Finding female between 61 - 67 inches
ecdf(67)
# 0.8457143
1 - ecdf(61)
ecdf(61)
ecdf(67)
height_cdf <- sapply(emp_fheight,ecdf)
plot(emp_fheight,height_cdf, xlab = "height", ylab = "Pr(height < =a)")
plot(emp_fheight,height_cdf, xlab = "height", ylab = "Pr(height <= a)", col = "black")
plot(emp_fheight,height_cdf, xlab = "height", ylab = "Pr(height <= a)", pch = 20,col = "black")
plot(emp_fheight,height_cdf, xlab = "height", ylab = "Pr(height <= a)", pch = 15,col = "black")
plot(emp_fheight,height_cdf, xlab = "height", ylab = "Pr(height <= a)", pch = 19,col = "black")
plot(emp_fheight,height_cdf, xlab = "height", ylab = "Pr(height <= a)")
abline(fem_height,col = "red",lty = 2)
abline(h = fem_height,col = "red",lty = 2)
theoretical_cdf <- pnorm(emp_fheight,avg,s)
abline(h = theoretical_cdf,col = "red",lty = 2)
abline(theoretical_cdf,col = "red",lty = 2)
abline(d = theoretical_cdf,col = "red",lty = 2)
plot(emp_fheight,height_cdf, xlab = "height", ylab = "Pr(height <= a)")
# Finding female between 61 - 67 inches
ecdf(67.5) - ecdf(60.5)
# 0.7542857
pnorm(67.5,avg,s) - pnorm(60.5, avg,s)
avg <- 69
s <- 3
top_male_height <- qnorm(.99,avg,s)
top_male_height
B <- 1000
n <- 10000
avg <- 100
s <- 15
high_IQ <- replicate(B,{
sim_IQ <- rnorm(n,avg,s)
max(sim_IQ)
})
hist(high_IQ, col = "navyblue")
IQ_quant <- qnorm(.75,avg,s)
IQ_quant
IQ_quant <- qnorm(.95,avg,s)
IQ_quant
hist(high_IQ, col = "coral")
n <- 1000
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))    # 1000 independent draws
S <- sum(x)    # total winnings = sum of draws
S
B <- 10000    # number of Monte Carlo experiments
S <- replicate(B, {
X <- sample(c(-1,1), n, replace = TRUE, prob = c(9/19, 10/19))    # simulate 1000 spins
sum(X)    # determine total profit
})
mean(S < 0)    # probability of the casino losing money
s <- seq(min(S), max(S), length = 100)    # sequence of 100 values across range of S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S))) # generate normal density for S
data.frame (S = S) %>%    # make data frame of S for histogram
ggplot(aes(S, ..density..)) +
geom_histogram(color = "red", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
library(tidyverse)
s <- seq(min(S), max(S), length = 100)    # sequence of 100 values across range of S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S))) # generate normal density for S
data.frame (S = S) %>%    # make data frame of S for histogram
ggplot(aes(S, ..density..)) +
geom_histogram(color = "red", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
ggplot(aes(S, ..density..), col ="red") +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
s <- seq(min(S), max(S), length = 100)    # sequence of 100 values across range of S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S))) # generate normal density for S
data.frame (S = S) %>%    # make data frame of S for histogram
ggplot(aes(S, ..density..), col ="red") +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
data.frame (S = S) %>%    # make data frame of S for histogram
ggplot(aes(S, ..density..)) +
geom_histogram(color = "white", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
gc()
geom.mean <- function(x){
mean <- exp(mean(log(x)))
}
x <-seq(1,64,by = 1.3)
geom.mean(x)
geom.mean <- function(x){
mean <- exp(mean(log(x)))
}
geom.mean <- function(x){
mean <- exp(mean(log(x)))
return(mean)
}
geom.mean(x)
mean(x)
geom.mean(x)
x <-c(x,567)
mean(x)
geom.mean(x)
shiny::runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/polite_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/polite_app')
ui <- fluidPage(
"Hello, what is your name?"
)
server <- function(input, output,session){
}
setwd(~/Shiny/polite_app)
setwd(~Shiny/polite_app)
setwd("C:/Users/jpmonteagudo/Desktop/R/Shiny/polite_app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
runApp('C:/Users/jpmonteagudo/Desktop/R/Shiny/test_app')
